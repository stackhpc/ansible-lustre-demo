- hosts: lustre
  tags:
    - always
    - setup
  become: no
  gather_facts: yes
  tasks:
    - name: Set fact for interface information
      set_fact:
        interface_info: "{{ ansible_interfaces | map('extract', ansible_facts) }}"
    - name: Set fact mapping IP addresses to interfaces
      set_fact:
        ip_to_interface: "{{ dict(interface_info | map(attribute='ipv' + ( ip_version | string ) + '.address') | zip( interface_info | map(attribute='device') )) }}"
      vars:
        ip_version: 4

- hosts: all
  tags: users
  become: yes
  tasks:
    - name: Create users
      ansible.builtin.user: "{{ item }}"
      loop: "{{ users }}"

- hosts: lustre_server
  tags: lustre_server
  become: yes
  tasks:
    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      register: selinux
    
    - name: Check for existing lustre install
      command: yum list --installed lustre
      failed_when: false
      changed_when: false
      register: _yum_lustre_server

    - name: Install latest kernel packages
      yum:
        name: "{{ kernel_pkgs }}"
        state: latest
      when: "'No matching Packages to list' in _yum_lustre_server.stderr"
      vars:
        kernel_pkgs:
          - kernel
          - kernel-devel
          - kernel-headers
          - kernel-tools
          - kernel-tools-libs
          - kernel-tools-libs-devel
      register: kernel_install
      
    - name: Reboot
      reboot:
      when: kernel_install.changed | default('false') or selinux.reboot_required
    
    - name: Enable RoCE # only required for RHEL7, 8.5 at least this is already done
      import_tasks: roce.yml
      when: "'o2ib' in lustre_core_nid"

    - name: Update facts after (possible) reboot
      setup:

    - name: Unmount auto-mounted ephemeral disk if reformatting
      shell:
        cmd: "umount $(lsblk --noheadings -o mountpoint {{ lustre_format_mgs.device }})" # does assume this is the first ephemeral
      when: lustre_format_force
      
    - name: Install lustre server
      tags: lustre_server_role
      import_role:
        name: ansible-role-lustre
    
    - name: List NIDs
      tags: checks
      command:
        cmd: lctl list_nids
      register: _lctl_nids
      failed_when: (_lctl_nids.rc != 0) or ('@' not in _lctl_nids.stdout)
      changed_when: false

    - name: List lustre devices
      tags: checks
      command:
        cmd: lctl dl
      register: _lctl_dl
      changed_when: false
    
    - name: Assert server components running
      tags: checks
      assert:
        that: item in _lctl_dl.stdout
        fail_msg: "Did not find '{{ item }}' in lctl dl output"
      loop:
        - UP mgs MGS
        - "UP mgc MGC{{ lustre_core_nid }}"
        - UP mds
        - UP mdt
        - UP ost

- hosts: lustre_clients
  tags:
    - lustre_clients
    - lustre_admin
  become: yes
  tasks:
    - name: Gather facts from MGS
      setup:
      delegate_to: "{{ groups['lustre_server'] | first }}"
      delegate_facts: True
    
    - name: Check for existing lustre install
      command: yum list --installed lustre-client
      failed_when: false
      changed_when: false
      register: _yum_lustre_client

    - name: Ensure kernel upgraded # as Lustre packages will be build against latest kernel
      yum:
        name: kernel*
        state: latest
      when: "'No matching Packages to list' in _yum_lustre_client.stderr"
      register: _kernel
    
    - name: Reboot
      reboot:
        post_reboot_delay: 2
      when: _kernel.changed | default(false)

    - name: Install lustre client
      import_role:
        name: ansible-role-lustre
    
    - name: Ensure mount point exists
      file:
        path: "/mnt/{{ lustre_fsname }}"
        state: directory
        # TODO owner, mode

- hosts: lustre_admin
  tags:
    - lustre_admin
    - filetree
  become: yes
  tasks:
    - name: Mount lustre fileysystem
      tags: mount
      mount:
        src: "{{ lustre_mount_src }}"
        path: "{{ lustre_mount_dir }}"
        fstype: lustre
        state: "{{ client_mount_state | default('mounted') }}"
    - import_tasks: filetree.yml # have to have this in place before mounting clients as mount fails if path defined in nodeset's `fileset` attribute doesn't exist

- hosts: lustre_clients:!lustre_admin
  tags:
    - lustre_clients
    - filetree
  become: yes
  tasks:
    - name: Mount lustre fileysystem
      tags: mount
      mount:
        src: "{{ lustre_mount_src }}"
        path: "{{ lustre_mount_dir }}"
        fstype: lustre
        state: "{{ client_mount_state | default('mounted') }}"

- hosts: lustre_exporters
  tags:
    - lustre_exporters
    - filetree
  become: yes
  tasks:
    - import_role:
        name: ansible-role-cluster-nfs
      vars:
        nfs_enable:
            server: true
            clients: false
        nfs_export: "{{ lustre_mount_dir }}"
        nfs_export_options: rw,insecure #,root_squash,all_squash,anongid=10102

- hosts: nfs_clients
  tags:
    - nfs_clients
    - filetree
  become: yes
  gather_facts: yes
  tasks:
    - import_role:
        name: ansible-role-cluster-nfs
      vars:
        nfs_enable:
            server: false
            clients: true
        nfs_server: "{{ hostvars[groups['lustre_exporters'] | first].networks[networks | first] }}" # exporter addres on same network as this host
        nfs_export: /mnt/lustre
        nfs_client_mnt_point: /mnt/lustre
        # nfs_client_mnt_state: absent

- hosts: all
  become: yes
  tags: tree
  gather_facts: no
  tasks:
    - yum:
        name: tree

